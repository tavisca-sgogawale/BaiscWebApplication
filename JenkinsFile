pipeline {
    agent any
    parameters {
        choice(
            choices: ['Build' ,'Test','Deploy','Publish'],
            description: '',
            name: 'REQUESTED_ACTION')
        string(name: 'REPO_PATH', defaultValue: 'https://github.com/tavisca-sgogawale/BaiscWebApplication', description: 'repository path')
        string(name: 'EXECUTABLE_FILE', defaultValue: 'BaiscWebApplication.dll', description: 'repository path')
        string(name: 'PROJECT_NAME', defaultValue: 'basicwebappication', description: 'repository path')
        string(name: 'BUILD_VERSION', defaultValue: '0.0', description: 'repository path')
        string(name: 'SOLUTION_PATH', defaultValue: 'BaiscWebApplication.sln', description: 'solution path')
        string(name: 'TEST_PATH', defaultValue: 'WebAppicationTest/WebAppicationTest.csproj', description: 'test path')
        string(name: 'DOCKER_IMAGE', defaultValue: 'testapi:v0.1', description: 'Docker image ')
       
        
    }
    stages 
        {

            stage('Build') 
            {
                when
                {
                    expression  { params.REQUESTED_ACTION == 'Build' || params.REQUESTED_ACTION == 'Test'}
                }
                steps {
                    powershell(script: "dotnet restore ${SOLUTION_PATH} --source https://api.nuget.org/v3/index.json")
                    powershell(script: "dotnet build ${SOLUTION_PATH} -p:Configuration=release -v:n")
                     
                }
            }
            stage('Test') 
            {
                when
                {
                    expression  { params.REQUESTED_ACTION == 'Test' }
                }
                steps {
                    powershell(script: "dotnet test ${TEST_PATH}")
                }
            }
            
            stage('Publish')
        {
            steps
            {
                powershell(script: "dotnet publish BaiscWebApplication -c Release -o artifacts")              
            }
        }
        stage('DockerImage')
        {
            steps
            {
               
               
                writeFile file: 'BaiscWebApplication/artifacts/Dockerfile', text: '''
                        FROM mcr.microsoft.com/dotnet/core/aspnet\n
                        ENV NAME ${Project_Name}\n
                        CMD ["dotnet", "${EXECUTABLE_FILE}"]\n'''
                powershell''''
                docker build  --tag=${PROJECT_NAME}:${BUILD_VERSION} "WebApi/bin/Debug/netcoreapp2.2/artifacts/"
                '''
              
            }
        }
        stage('Archive')
        {
            steps
            {
               
                powershell(script: 'compress-archive BaiscWebApplication/artifacts publish.zip -Update')
                archiveArtifacts artifacts: 'publish.zip'    
            }
        }
        stage('Deploy') 
            {
                when {
                expression {
                     params.REQUESTED_ACTION == 'Deploy' && currentBuild.result == 'SUCCESS'
                }
                }
                steps {
                   
                    powershell(script: "docker run -p 3422:80 ${DOCKER_IMAGE}:${DOCKER_TAG} ")
                }
            }
        }
 
}
