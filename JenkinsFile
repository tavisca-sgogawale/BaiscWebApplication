pipeline {
    agent any
    parameters {
        choice(
            choices: ['Build' , 'Test'],
            description: '',
            name: 'REQUESTED_ACTION')
        string(name: 'REPO_PATH', defaultValue: 'https://github.com/tavisca-sgogawale/BaiscWebApplication', description: 'repository path')
        string(name: 'SOLUTION_PATH', defaultValue: 'BaiscWebApplication.sln', description: 'solution path')
        string(name: 'TEST_PATH', defaultValue: 'WebAppicationTest/WebAppicationTest.csproj', description: 'test path')
    }
    stages 
        {

            stage('Build') 
            {
                when
                {
                    expression  { params.REQUESTED_ACTION == 'Build' || params.REQUESTED_ACTION == 'Test'}
                }
                steps {
                    sh '''dotnet restore ${SOLUTION_PATH} --source https://api.nuget.org/v3/index.json
                        dotnet build ${SOLUTION_PATH} -p:Configuration=release -v:n
                        '''
                }
            }
            stage('Test') 
            {
                when
                {
                    expression  { params.REQUESTED_ACTION == 'Test' }
                }
                steps {
                    sh'dotnet test ${TEST_PATH}'
                }
            }
            stage('Deploy') 
            {
                when {
                expression {
                    currentBuild.result == null || currentBuild.result == 'SUCCESS' (1)
                }
                }
                steps {
                    sh 'dotnet publish'
                    sh 'dotnet BaiscWebApplication/bin/Release/netcoreapp2.2/BaiscWebApplication.dll'
                }
            }
        }
    
    post{
             success{
                 archiveArtifacts artifacts: '**', fingerprint:true
                 sh 'dotnet BaiscWebApplication/bin/Release/netcoreapp2.2/BaiscWebApplication.dll'
             }
        }
    }
}
